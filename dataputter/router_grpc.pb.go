// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package dataputter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// RouterClient is the client API for Router service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RouterClient interface {
	CreateObject(ctx context.Context, in *CreateObjectRequest, opts ...grpc.CallOption) (*ObjectActionResponse, error)
	DeleteObject(ctx context.Context, in *DeleteObjectRequest, opts ...grpc.CallOption) (*ObjectActionResponse, error)
}

type routerClient struct {
	cc grpc.ClientConnInterface
}

func NewRouterClient(cc grpc.ClientConnInterface) RouterClient {
	return &routerClient{cc}
}

func (c *routerClient) CreateObject(ctx context.Context, in *CreateObjectRequest, opts ...grpc.CallOption) (*ObjectActionResponse, error) {
	out := new(ObjectActionResponse)
	err := c.cc.Invoke(ctx, "/Router/CreateObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) DeleteObject(ctx context.Context, in *DeleteObjectRequest, opts ...grpc.CallOption) (*ObjectActionResponse, error) {
	out := new(ObjectActionResponse)
	err := c.cc.Invoke(ctx, "/Router/DeleteObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RouterServer is the server API for Router service.
// All implementations must embed UnimplementedRouterServer
// for forward compatibility
type RouterServer interface {
	CreateObject(context.Context, *CreateObjectRequest) (*ObjectActionResponse, error)
	DeleteObject(context.Context, *DeleteObjectRequest) (*ObjectActionResponse, error)
	mustEmbedUnimplementedRouterServer()
}

// UnimplementedRouterServer must be embedded to have forward compatible implementations.
type UnimplementedRouterServer struct {
}

func (UnimplementedRouterServer) CreateObject(context.Context, *CreateObjectRequest) (*ObjectActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateObject not implemented")
}
func (UnimplementedRouterServer) DeleteObject(context.Context, *DeleteObjectRequest) (*ObjectActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObject not implemented")
}
func (UnimplementedRouterServer) mustEmbedUnimplementedRouterServer() {}

// UnsafeRouterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RouterServer will
// result in compilation errors.
type UnsafeRouterServer interface {
	mustEmbedUnimplementedRouterServer()
}

func RegisterRouterServer(s grpc.ServiceRegistrar, srv RouterServer) {
	s.RegisterService(&_Router_serviceDesc, srv)
}

func _Router_CreateObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).CreateObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Router/CreateObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).CreateObject(ctx, req.(*CreateObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_DeleteObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).DeleteObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Router/DeleteObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).DeleteObject(ctx, req.(*DeleteObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Router_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Router",
	HandlerType: (*RouterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateObject",
			Handler:    _Router_CreateObject_Handler,
		},
		{
			MethodName: "DeleteObject",
			Handler:    _Router_DeleteObject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataputter/router.proto",
}

// WriteNodeClient is the client API for WriteNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WriteNodeClient interface {
	Write(ctx context.Context, in *NodeWriteRequest, opts ...grpc.CallOption) (*NodeResponse, error)
	Delete(ctx context.Context, in *NodeDeleteRequest, opts ...grpc.CallOption) (*NodeResponse, error)
	Read(ctx context.Context, in *NodeReadRequest, opts ...grpc.CallOption) (*NodeResponse, error)
}

type writeNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewWriteNodeClient(cc grpc.ClientConnInterface) WriteNodeClient {
	return &writeNodeClient{cc}
}

func (c *writeNodeClient) Write(ctx context.Context, in *NodeWriteRequest, opts ...grpc.CallOption) (*NodeResponse, error) {
	out := new(NodeResponse)
	err := c.cc.Invoke(ctx, "/WriteNode/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *writeNodeClient) Delete(ctx context.Context, in *NodeDeleteRequest, opts ...grpc.CallOption) (*NodeResponse, error) {
	out := new(NodeResponse)
	err := c.cc.Invoke(ctx, "/WriteNode/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *writeNodeClient) Read(ctx context.Context, in *NodeReadRequest, opts ...grpc.CallOption) (*NodeResponse, error) {
	out := new(NodeResponse)
	err := c.cc.Invoke(ctx, "/WriteNode/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WriteNodeServer is the server API for WriteNode service.
// All implementations must embed UnimplementedWriteNodeServer
// for forward compatibility
type WriteNodeServer interface {
	Write(context.Context, *NodeWriteRequest) (*NodeResponse, error)
	Delete(context.Context, *NodeDeleteRequest) (*NodeResponse, error)
	Read(context.Context, *NodeReadRequest) (*NodeResponse, error)
	mustEmbedUnimplementedWriteNodeServer()
}

// UnimplementedWriteNodeServer must be embedded to have forward compatible implementations.
type UnimplementedWriteNodeServer struct {
}

func (UnimplementedWriteNodeServer) Write(context.Context, *NodeWriteRequest) (*NodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedWriteNodeServer) Delete(context.Context, *NodeDeleteRequest) (*NodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedWriteNodeServer) Read(context.Context, *NodeReadRequest) (*NodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedWriteNodeServer) mustEmbedUnimplementedWriteNodeServer() {}

// UnsafeWriteNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WriteNodeServer will
// result in compilation errors.
type UnsafeWriteNodeServer interface {
	mustEmbedUnimplementedWriteNodeServer()
}

func RegisterWriteNodeServer(s grpc.ServiceRegistrar, srv WriteNodeServer) {
	s.RegisterService(&_WriteNode_serviceDesc, srv)
}

func _WriteNode_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeWriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WriteNodeServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WriteNode/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WriteNodeServer).Write(ctx, req.(*NodeWriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WriteNode_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WriteNodeServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WriteNode/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WriteNodeServer).Delete(ctx, req.(*NodeDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WriteNode_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WriteNodeServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WriteNode/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WriteNodeServer).Read(ctx, req.(*NodeReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WriteNode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "WriteNode",
	HandlerType: (*WriteNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Write",
			Handler:    _WriteNode_Write_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _WriteNode_Delete_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _WriteNode_Read_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataputter/router.proto",
}
